---
format_version: "8"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: react-native
trigger_map:
  - push_branch: "*"
    workflow: primary
  - pull_request_source_branch: "*"
    workflow: primary
workflows:
  deploy:
    description:
      "## Configure Android part of the deploy workflow\n\nTo generate
      a signed APK:\n\n1. Open the **Workflow** tab of your project on Bitrise.io\n1.
      Add **Sign APK step right after Android Build step**\n1. Click on **Code Signing**
      tab\n1. Find the **ANDROID KEYSTORE FILE** section\n1. Click or drop your file
      on the upload file field\n1. Fill the displayed 3 input fields:\n1. **Keystore
      password**\n1. **Keystore alias**\n1. **Private key password**\n1. Click on
      **[Save metadata]** button\n\nThat's it! From now on, **Sign APK** step will
      receive your uploaded files.\n\n## Configure iOS part of the deploy workflow\n\nTo
      generate IPA:\n\n1. Open the **Workflow** tab of your project on Bitrise.io\n1.
      Click on **Code Signing** tab\n1. Find the **PROVISIONING PROFILE** section\n1.
      Click or drop your file on the upload file field\n1. Find the **CODE SIGNING
      IDENTITY** section\n1. Click or drop your file on the upload file field\n1.
      Click on **Workflows** tab\n1. Select deploy workflow\n1. Select **Xcode Archive
      & Export for iOS** step\n1. Open **Force Build Settings** input group\n1. Specify
      codesign settings\nSet **Force code signing with Development Team**, **Force
      code signing with Code Signing Identity**  \nand **Force code signing with Provisioning
      Profile** inputs regarding to the uploaded codesigning files\n1. Specify manual
      codesign style\nIf the codesigning files, are generated manually on the Apple
      Developer Portal,  \nyou need to explicitly specify to use manual coedsign settings
      \ \n(as ejected rn projects have xcode managed codesigning turned on).  \nTo
      do so, add 'CODE_SIGN_STYLE=\"Manual\"' to 'Additional options for xcodebuild
      call' input\n\n## To run this workflow\n\nIf you want to run this workflow manually:\n\n1.
      Open the app's build list page\n2. Click on **[Start/Schedule a Build]** button\n3.
      Select **deploy** in **Workflow** dropdown input\n4. Click **[Start Build]**
      button\n\nOr if you need this workflow to be started by a GIT event:\n\n1. Click
      on **Triggers** tab\n2. Setup your desired event (push/tag/pull) and select
      **deploy** workflow\n3. Click on **[Done]** and then **[Save]** buttons\n\nThe
      next change in your repository that matches any of your trigger map event will
      start **deploy** workflow.\n"
    steps:
      - android-build@0.10.0:
          inputs:
            - project_location: "$PROJECT_LOCATION"
  primary:
    steps:
      - activate-ssh-key@4.0.3:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
          inputs:
            - verbose: "true"
      - git-clone@4.0.14: {}
      - install-react-native@0.9.1: {}
      - script@1.1.5:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -e
                # debug log
                set -x

                # write your script here
                cd ~/bin
                wget https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip
                unzip ninja-mac.zip
                chmod +x ninja
                export PATH=~/bin:$PATH

                # or run a script from your repository, like:
                # bash ./path/to/script.sh
                # not just bash, e.g.:
                # ruby ./path/to/script.rb
          title: Install ninja
      - npm@1.1.0:
          inputs:
            - command: install -g detox-cli
      - npm@1.0.2:
          inputs:
            - command: install
      - script:
          inputs:
            - content: |-
                #!/bin/bash

                brew tap wix/brew
                brew install applesimutils
          title: Install Detox Utils
      - script@1.1.5:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -e
                # debug log
                set -x

                # write your script here
                react-native link

                # or run a script from your repository, like:
                # bash ./path/to/script.sh
                # not just bash, e.g.:
                # ruby ./path/to/script.rb
      - script@1.1.5:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -e
                # debug log
                set -x



                cd $ANDROID_HOME/emulator
                echo no | avdmanager create avd -n emulator-5554 -k "system-images;android-26;google_apis;x86" --force
                emulator -avd emulator-5554 -no-window -no-audio -debug-init > /dev/null 2>&1 &
                echo "Waiting emulator is ready..."
                adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
                echo "Emulator is ready!"

                #cd $ANDROID_HOME
                #sudo rm -rf $ANDROID_HOME/emulator
                #wget -q https://dl.google.com/android/repository/emulator-darwin-5346014.zip
                #unzip -q emulator-darwin-5346014.zip
                #ls -al $ANDROID_HOME/emulator
                #echo no | avdmanager create avd -n emulator-5554 -k "system-images;android-28;google_apis;x86" --force
                #cd -
          title: Create android emulator
      - script@1.1.5:
          title: Log
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -e
                # debug log
                set -x

                adb -s emulator-5554 shell "dumpsys power"
                adb logcat -d
                avdmanager list
      - script@1.1.5:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -e
                # debug log
                set -x

                # write your script here
                detox build -c android.emu.release
                detox test -c android.emu.release --cleanup --headless --loglevel trace --take-screenshots all

                # or run a script from your repository, like:
                # bash ./path/to/script.sh
                # not just bash, e.g.:
                # ruby ./path/to/script.rb
app:
  envs:
    - opts:
        is_expand: false
      PROJECT_LOCATION: android
    - opts:
        is_expand: false
      MODULE: app
    - opts:
        is_expand: false
      VARIANT: ""
    - opts:
        is_expand: false
      BITRISE_PROJECT_PATH: ios/RNMainchainDemo.xcodeproj
    - opts:
        is_expand: false
      BITRISE_SCHEME: RNMainchainDemo
    - opts:
        is_expand: false
      BITRISE_EXPORT_METHOD: development
